import groovy.json.JsonSlurperClassic

pipeline {
    agent any 
    parameters {
        string(name: 'banner', defaultValue: 'safeway', description: 'Which banner will be tested')
        booleanParam (name: 'executeTests', defaultValue: true, description: '')
    }
    stages {
        stage ("Create Run TestRails") {
           steps {
               script{
                    def now = new Date().format("yy/MM/dd-HH:mm")
                    println now
                    def response = httpRequest authentication: 'TestRail', consoleLogResponseBody: true, contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: """{
                        "name": "Android Run - ${now}"
                    }""", responseHandle: 'NONE', url: 'https://gerardtest.testrail.io/index.php?/api/v2/add_run/1', wrapAsMultipart: false
                    println('Status: '+response.status)
                    println('Response: '+response.content)
                    def jsonResponse = new JsonSlurperClassic().parseText(response.content)
                    println('Json:  ' + jsonResponse)
                    println('Run Id is: '+ jsonResponse['id'])
               }
           } 
        } 
        stage ("test execution") {
            when {
                expression {
                   params.executeTests
                }
            }
            steps {
                script {
                    parallel (
                        runner1: {
                                    build job: 'RunnerAndroid',
                                    parameters: [
                                        [$class: 'StringParameterValue', name: 'suite', value: 'src/test/resources/Mobile/gg_features/gg_cart_SCP.feature'],
                                        [$class: 'StringParameterValue', name: 'testRailSuiteId', value: jsonResponse['id']]
                                    ]  
                        },
                        runner2: {
                                    build job: 'RunnerAndroid',
                                    parameters: [
                                        [$class: 'StringParameterValue', name: 'suite', value: 'src/test/resources/Mobile/gg_features/gg_cart_substitutionV2.feature'],
                                        [$class: 'StringParameterValue', name: 'testRailSuiteId', value: jsonResponse['id']]
                                    ]   
                        }
                    )
                }
            }
        }
    } 
}


pipeline {
    agent {
   node { 
      label 'docker'
   }
} 
    parameters {
        string(name: 'suite', defaultValue: 'src/test/resources/Mobile/gg_features/gg_cart_SCP.feature', description: 'Which will be executed')
    }
    stages {
        stage ("Download Repository") {
            steps {
                git branch: 'main', credentialsId: 'GitHub', url: 'https://github.com/Gerardtit/testing.git'
            }
        }
        stage ("Execute tests") {
            steps {
                
                sh """
                    docker run --privileged -d \
                    -v \"${WORKSPACE}\":/root/repository/ \
                    -v /home/gerard/Documents/Apps/:/root/repository/src/test/resources/Apps/android/qa2/ \
                    -e DEVICE="Samsung Galaxy S10" \
                    -e EMULATOR_ARGS="-wipe-data -partition-size 1024" \
                    --name android\"${env.BUILD_NUMBER}\" test
                """
                sh 'sleep 45'
                sh """    
                docker exec android\"${env.BUILD_NUMBER}\" bash -c "cd repository && mvn test -Dtest=MobileRunner -Dbanner=safeway -DmobileDevice=emulator -DmobileEnv=qa2 -Dcucumber.features=\"${params.suite}\""
                """
                }
        }
    }
        post {
        always {
            sh """docker kill android\"${env.BUILD_NUMBER}\" """
            sh 'docker system prune -f || true'
        }
    }
}